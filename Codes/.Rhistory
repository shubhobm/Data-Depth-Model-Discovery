p = ncol(X1)
## matrix of full model bootstrap betas
beta.mat = matrix(0, nrow=nboot, ncol=p)
resid.mat = matrix(rnorm(n*nboot), ncol=nboot) * matrix(r, nrow=n, ncol=nboot, byrow=F)
score.mat = t(H %*% resid.mat)
depth.full = mdepth.RP(score.mat, score.mat)$dep
Cn.full = mean(depth.full)
wildmat = matrix(rnorm(n*nboot), ncol=nboot)
loopfun = function(j){
set.seed(j)
## calculate quantities for truncated model
Hj = H[-j,] - outer(beta.cov[j,-j], as.numeric(W %*% X1[,j]))
rj = r + X1[,j] * beta.hat[j]
jresid.mat = wildmat * matrix(rj, nrow=n, ncol=nboot, byrow=F)
jscore.mat = t(Hj %*% jresid.mat)
## calculate Cn for truncated model, for a range of bootstrap variances
beta.mat = matrix(beta.hat, nrow=nboot, ncol=p, byrow=T)+ sdn*score.mat
jbeta.mat = matrix(0, ncol=p, nrow=nboot)
jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T) +
sdn * jscore.mat
# jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T)
# jbeta.mat = jbeta.mat + sdn*score.mat
jdepth.vec = mdepth.RP(jbeta.mat, beta.mat)$dep
# return mean depth of truncated model, for all values of bootstrap sd
jdepth.vec
}
depth.mat = lapply(1:p, loopfun)
depth.mat = matrix(unlist(depth.mat), ncol=p, byrow=F)
## plot to check
plot(density(depth.full), xlim=c(0,.5), ylim=c(0,20), lwd=2)
for(i in 1:p){ lines(density(depth.mat[,i]), col="red", lwd=2)}
for(i in active.ind){ lines(density(depth.mat[,i]), col="blue", lwd=2)}
lines(density(depth.full), lwd=2)
legend("topright", c("Non-zero indices","Zero indices","Full model"), col=c("blue","red","black"), lty=1, lwd=2)
dim(depth.mat)
p
sdn
sdn=1
for(i in 1:p){ lines(density(depth.mat[,i]), col="red", lwd=2)}
plot(density(depth.full), xlim=c(0,.5), ylim=c(0,20), lwd=2)
for(i in 1:p){ lines(density(depth.mat[,i]), col="red", lwd=2)}
for(i in active.ind){ lines(density(depth.mat[,i]), col="blue", lwd=2)}
sdn
sdn=2
beta.hat = mod$beta.hat
beta.cov = mod$beta.cov
W = mod$W
X1 = mod$X1
H = mod$H
r = mod$r
n = nrow(X1)
p = ncol(X1)
## matrix of full model bootstrap betas
beta.mat = matrix(0, nrow=nboot, ncol=p)
resid.mat = matrix(rnorm(n*nboot), ncol=nboot) * matrix(r, nrow=n, ncol=nboot, byrow=F)
score.mat = t(H %*% resid.mat)
depth.full = mdepth.RP(score.mat, score.mat)$dep
Cn.full = mean(depth.full)
wildmat = matrix(rnorm(n*nboot), ncol=nboot)
loopfun = function(j){
set.seed(j)
## calculate quantities for truncated model
Hj = H[-j,] - outer(beta.cov[j,-j], as.numeric(W %*% X1[,j]))
rj = r + X1[,j] * beta.hat[j]
jresid.mat = wildmat * matrix(rj, nrow=n, ncol=nboot, byrow=F)
jscore.mat = t(Hj %*% jresid.mat)
## calculate Cn for truncated model, for a range of bootstrap variances
beta.mat = matrix(beta.hat, nrow=nboot, ncol=p, byrow=T)+ sdn*score.mat
jbeta.mat = matrix(0, ncol=p, nrow=nboot)
jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T) +
sdn * jscore.mat
# jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T)
# jbeta.mat = jbeta.mat + sdn*score.mat
jdepth.vec = mdepth.RP(jbeta.mat, beta.mat)$dep
# return mean depth of truncated model, for all values of bootstrap sd
jdepth.vec
}
depth.mat = lapply(1:p, loopfun)
depth.mat = matrix(unlist(depth.mat), ncol=p, byrow=F)
## plot to check
plot(density(depth.full), xlim=c(0,.5), ylim=c(0,20), lwd=2)
for(i in 1:p){ lines(density(depth.mat[,i]), col="red", lwd=2)}
# for(i in active.ind){ lines(density(depth.mat[,i]), col="blue", lwd=2)}
lines(density(depth.full), lwd=2)
legend("topright", c("Non-zero indices","Zero indices","Full model"), col=c("blue","red","black"), lty=1, lwd=2)
sdn
sdn=1
beta.hat = mod$beta.hat
beta.cov = mod$beta.cov
W = mod$W
X1 = mod$X1
H = mod$H
r = mod$r
n = nrow(X1)
p = ncol(X1)
## matrix of full model bootstrap betas
beta.mat = matrix(0, nrow=nboot, ncol=p)
resid.mat = matrix(rnorm(n*nboot), ncol=nboot) * matrix(r, nrow=n, ncol=nboot, byrow=F)
score.mat = t(H %*% resid.mat)
depth.full = mdepth.RP(score.mat, score.mat)$dep
Cn.full = mean(depth.full)
wildmat = matrix(rnorm(n*nboot), ncol=nboot)
loopfun = function(j){
set.seed(j)
## calculate quantities for truncated model
Hj = H[-j,] - outer(beta.cov[j,-j], as.numeric(W %*% X1[,j]))
rj = r + X1[,j] * beta.hat[j]
jresid.mat = wildmat * matrix(rj, nrow=n, ncol=nboot, byrow=F)
jscore.mat = t(Hj %*% jresid.mat)
## calculate Cn for truncated model, for a range of bootstrap variances
beta.mat = matrix(beta.hat, nrow=nboot, ncol=p, byrow=T)+ sdn*score.mat
jbeta.mat = matrix(0, ncol=p, nrow=nboot)
jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T) +
sdn * jscore.mat
# jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T)
# jbeta.mat = jbeta.mat + sdn*score.mat
jdepth.vec = mdepth.RP(jbeta.mat, beta.mat)$dep
# return mean depth of truncated model, for all values of bootstrap sd
jdepth.vec
}
depth.mat = lapply(1:p, loopfun)
depth.mat = matrix(unlist(depth.mat), ncol=p, byrow=F)
## plot to check
plot(density(depth.full), xlim=c(0,.5), ylim=c(0,20), lwd=2)
for(i in 1:p){ lines(density(depth.mat[,i]), col="red", lwd=2)}
# for(i in active.ind){ lines(density(depth.mat[,i]), col="blue", lwd=2)}
lines(density(depth.full), lwd=2)
legend("topright", c("Non-zero indices","Zero indices","Full model"), col=c("blue","red","black"), lty=1, lwd=2)
sdn=3
beta.hat = mod$beta.hat
beta.cov = mod$beta.cov
W = mod$W
X1 = mod$X1
H = mod$H
r = mod$r
n = nrow(X1)
p = ncol(X1)
## matrix of full model bootstrap betas
beta.mat = matrix(0, nrow=nboot, ncol=p)
resid.mat = matrix(rnorm(n*nboot), ncol=nboot) * matrix(r, nrow=n, ncol=nboot, byrow=F)
score.mat = t(H %*% resid.mat)
depth.full = mdepth.RP(score.mat, score.mat)$dep
Cn.full = mean(depth.full)
wildmat = matrix(rnorm(n*nboot), ncol=nboot)
loopfun = function(j){
set.seed(j)
## calculate quantities for truncated model
Hj = H[-j,] - outer(beta.cov[j,-j], as.numeric(W %*% X1[,j]))
rj = r + X1[,j] * beta.hat[j]
jresid.mat = wildmat * matrix(rj, nrow=n, ncol=nboot, byrow=F)
jscore.mat = t(Hj %*% jresid.mat)
## calculate Cn for truncated model, for a range of bootstrap variances
beta.mat = matrix(beta.hat, nrow=nboot, ncol=p, byrow=T)+ sdn*score.mat
jbeta.mat = matrix(0, ncol=p, nrow=nboot)
jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T) +
sdn * jscore.mat
# jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T)
# jbeta.mat = jbeta.mat + sdn*score.mat
jdepth.vec = mdepth.RP(jbeta.mat, beta.mat)$dep
# return mean depth of truncated model, for all values of bootstrap sd
jdepth.vec
}
depth.mat = lapply(1:p, loopfun)
depth.mat = matrix(unlist(depth.mat), ncol=p, byrow=F)
## plot to check
plot(density(depth.full), xlim=c(0,.5), ylim=c(0,20), lwd=2)
for(i in 1:p){ lines(density(depth.mat[,i]), col="red", lwd=2)}
# for(i in active.ind){ lines(density(depth.mat[,i]), col="blue", lwd=2)}
lines(density(depth.full), lwd=2)
legend("topright", c("Non-zero indices","Zero indices","Full model"), col=c("blue","red","black"), lty=1, lwd=2)
sdn=4
beta.hat = mod$beta.hat
beta.cov = mod$beta.cov
W = mod$W
X1 = mod$X1
H = mod$H
r = mod$r
n = nrow(X1)
p = ncol(X1)
## matrix of full model bootstrap betas
beta.mat = matrix(0, nrow=nboot, ncol=p)
resid.mat = matrix(rnorm(n*nboot), ncol=nboot) * matrix(r, nrow=n, ncol=nboot, byrow=F)
score.mat = t(H %*% resid.mat)
depth.full = mdepth.RP(score.mat, score.mat)$dep
Cn.full = mean(depth.full)
wildmat = matrix(rnorm(n*nboot), ncol=nboot)
loopfun = function(j){
set.seed(j)
## calculate quantities for truncated model
Hj = H[-j,] - outer(beta.cov[j,-j], as.numeric(W %*% X1[,j]))
rj = r + X1[,j] * beta.hat[j]
jresid.mat = wildmat * matrix(rj, nrow=n, ncol=nboot, byrow=F)
jscore.mat = t(Hj %*% jresid.mat)
## calculate Cn for truncated model, for a range of bootstrap variances
beta.mat = matrix(beta.hat, nrow=nboot, ncol=p, byrow=T)+ sdn*score.mat
jbeta.mat = matrix(0, ncol=p, nrow=nboot)
jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T) +
sdn * jscore.mat
# jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T)
# jbeta.mat = jbeta.mat + sdn*score.mat
jdepth.vec = mdepth.RP(jbeta.mat, beta.mat)$dep
# return mean depth of truncated model, for all values of bootstrap sd
jdepth.vec
}
depth.mat = lapply(1:p, loopfun)
depth.mat = matrix(unlist(depth.mat), ncol=p, byrow=F)
## plot to check
plot(density(depth.full), xlim=c(0,.5), ylim=c(0,20), lwd=2)
for(i in 1:p){ lines(density(depth.mat[,i]), col="red", lwd=2)}
# for(i in active.ind){ lines(density(depth.mat[,i]), col="blue", lwd=2)}
lines(density(depth.full), lwd=2)
legend("topright", c("Non-zero indices","Zero indices","Full model"), col=c("blue","red","black"), lty=1, lwd=2)
load("D:/Study/My projects/SNP-selection-twin-studies/gedi5 outputs/modelCOMT.Rda")
beta.hat = mod$beta.hat
beta.cov = mod$beta.cov
W = mod$W
X1 = mod$X1
H = mod$H
r = mod$r
n = nrow(X1)
p = ncol(X1)
## matrix of full model bootstrap betas
beta.mat = matrix(0, nrow=nboot, ncol=p)
resid.mat = matrix(rnorm(n*nboot), ncol=nboot) * matrix(r, nrow=n, ncol=nboot, byrow=F)
score.mat = t(H %*% resid.mat)
depth.full = mdepth.RP(score.mat, score.mat)$dep
Cn.full = mean(depth.full)
wildmat = matrix(rnorm(n*nboot), ncol=nboot)
loopfun = function(j){
set.seed(j)
## calculate quantities for truncated model
Hj = H[-j,] - outer(beta.cov[j,-j], as.numeric(W %*% X1[,j]))
rj = r + X1[,j] * beta.hat[j]
jresid.mat = wildmat * matrix(rj, nrow=n, ncol=nboot, byrow=F)
jscore.mat = t(Hj %*% jresid.mat)
## calculate Cn for truncated model, for a range of bootstrap variances
beta.mat = matrix(beta.hat, nrow=nboot, ncol=p, byrow=T)+ sdn*score.mat
jbeta.mat = matrix(0, ncol=p, nrow=nboot)
jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T) +
sdn * jscore.mat
# jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T)
# jbeta.mat = jbeta.mat + sdn*score.mat
jdepth.vec = mdepth.RP(jbeta.mat, beta.mat)$dep
# return mean depth of truncated model, for all values of bootstrap sd
jdepth.vec
}
depth.mat = lapply(1:p, loopfun)
depth.mat = matrix(unlist(depth.mat), ncol=p, byrow=F)
## plot to check
plot(density(depth.full), xlim=c(0,.5), ylim=c(0,20), lwd=2)
for(i in 1:p){ lines(density(depth.mat[,i]), col="red", lwd=2)}
# for(i in active.ind){ lines(density(depth.mat[,i]), col="blue", lwd=2)}
lines(density(depth.full), lwd=2)
legend("topright", c("Non-zero indices","Zero indices","Full model"), col=c("blue","red","black"), lty=1, lwd=2)
mod = model.list
beta.hat = mod$beta.hat
beta.cov = mod$beta.cov
W = mod$W
X1 = mod$X1
H = mod$H
r = mod$r
n = nrow(X1)
p = ncol(X1)
## matrix of full model bootstrap betas
beta.mat = matrix(0, nrow=nboot, ncol=p)
resid.mat = matrix(rnorm(n*nboot), ncol=nboot) * matrix(r, nrow=n, ncol=nboot, byrow=F)
score.mat = t(H %*% resid.mat)
depth.full = mdepth.RP(score.mat, score.mat)$dep
Cn.full = mean(depth.full)
wildmat = matrix(rnorm(n*nboot), ncol=nboot)
loopfun = function(j){
set.seed(j)
## calculate quantities for truncated model
Hj = H[-j,] - outer(beta.cov[j,-j], as.numeric(W %*% X1[,j]))
rj = r + X1[,j] * beta.hat[j]
jresid.mat = wildmat * matrix(rj, nrow=n, ncol=nboot, byrow=F)
jscore.mat = t(Hj %*% jresid.mat)
## calculate Cn for truncated model, for a range of bootstrap variances
beta.mat = matrix(beta.hat, nrow=nboot, ncol=p, byrow=T)+ sdn*score.mat
jbeta.mat = matrix(0, ncol=p, nrow=nboot)
jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T) +
sdn * jscore.mat
# jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T)
# jbeta.mat = jbeta.mat + sdn*score.mat
jdepth.vec = mdepth.RP(jbeta.mat, beta.mat)$dep
# return mean depth of truncated model, for all values of bootstrap sd
jdepth.vec
}
depth.mat = lapply(1:p, loopfun)
depth.mat = matrix(unlist(depth.mat), ncol=p, byrow=F)
## plot to check
plot(density(depth.full), xlim=c(0,.5), ylim=c(0,20), lwd=2)
for(i in 1:p){ lines(density(depth.mat[,i]), col="red", lwd=2)}
# for(i in active.ind){ lines(density(depth.mat[,i]), col="blue", lwd=2)}
lines(density(depth.full), lwd=2)
legend("topright", c("Non-zero indices","Zero indices","Full model"), col=c("blue","red","black"), lty=1, lwd=2)
sdn
sdn=1
beta.hat = mod$beta.hat
beta.cov = mod$beta.cov
W = mod$W
X1 = mod$X1
H = mod$H
r = mod$r
n = nrow(X1)
p = ncol(X1)
## matrix of full model bootstrap betas
beta.mat = matrix(0, nrow=nboot, ncol=p)
resid.mat = matrix(rnorm(n*nboot), ncol=nboot) * matrix(r, nrow=n, ncol=nboot, byrow=F)
score.mat = t(H %*% resid.mat)
depth.full = mdepth.RP(score.mat, score.mat)$dep
Cn.full = mean(depth.full)
wildmat = matrix(rnorm(n*nboot), ncol=nboot)
loopfun = function(j){
set.seed(j)
## calculate quantities for truncated model
Hj = H[-j,] - outer(beta.cov[j,-j], as.numeric(W %*% X1[,j]))
rj = r + X1[,j] * beta.hat[j]
jresid.mat = wildmat * matrix(rj, nrow=n, ncol=nboot, byrow=F)
jscore.mat = t(Hj %*% jresid.mat)
## calculate Cn for truncated model, for a range of bootstrap variances
beta.mat = matrix(beta.hat, nrow=nboot, ncol=p, byrow=T)+ sdn*score.mat
jbeta.mat = matrix(0, ncol=p, nrow=nboot)
jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T) +
sdn * jscore.mat
# jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T)
# jbeta.mat = jbeta.mat + sdn*score.mat
jdepth.vec = mdepth.RP(jbeta.mat, beta.mat)$dep
# return mean depth of truncated model, for all values of bootstrap sd
jdepth.vec
}
depth.mat = lapply(1:p, loopfun)
depth.mat = matrix(unlist(depth.mat), ncol=p, byrow=F)
## plot to check
plot(density(depth.full), xlim=c(0,.5), ylim=c(0,20), lwd=2)
for(i in 1:p){ lines(density(depth.mat[,i]), col="red", lwd=2)}
# for(i in active.ind){ lines(density(depth.mat[,i]), col="blue", lwd=2)}
lines(density(depth.full), lwd=2)
legend("topright", c("Non-zero indices","Zero indices","Full model"), col=c("blue","red","black"), lty=1, lwd=2)
sdn
sdn=10
beta.hat = mod$beta.hat
beta.cov = mod$beta.cov
W = mod$W
X1 = mod$X1
H = mod$H
r = mod$r
n = nrow(X1)
p = ncol(X1)
## matrix of full model bootstrap betas
beta.mat = matrix(0, nrow=nboot, ncol=p)
resid.mat = matrix(rnorm(n*nboot), ncol=nboot) * matrix(r, nrow=n, ncol=nboot, byrow=F)
score.mat = t(H %*% resid.mat)
depth.full = mdepth.RP(score.mat, score.mat)$dep
Cn.full = mean(depth.full)
wildmat = matrix(rnorm(n*nboot), ncol=nboot)
loopfun = function(j){
set.seed(j)
## calculate quantities for truncated model
Hj = H[-j,] - outer(beta.cov[j,-j], as.numeric(W %*% X1[,j]))
rj = r + X1[,j] * beta.hat[j]
jresid.mat = wildmat * matrix(rj, nrow=n, ncol=nboot, byrow=F)
jscore.mat = t(Hj %*% jresid.mat)
## calculate Cn for truncated model, for a range of bootstrap variances
beta.mat = matrix(beta.hat, nrow=nboot, ncol=p, byrow=T)+ sdn*score.mat
jbeta.mat = matrix(0, ncol=p, nrow=nboot)
jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T) +
sdn * jscore.mat
# jbeta.mat[,-j] = matrix(beta.hat[-j], nrow=nboot, ncol=p-1, byrow=T)
# jbeta.mat = jbeta.mat + sdn*score.mat
jdepth.vec = mdepth.RP(jbeta.mat, beta.mat)$dep
# return mean depth of truncated model, for all values of bootstrap sd
jdepth.vec
}
depth.mat = lapply(1:p, loopfun)
depth.mat = matrix(unlist(depth.mat), ncol=p, byrow=F)
## plot to check
plot(density(depth.full), xlim=c(0,.5), ylim=c(0,20), lwd=2)
for(i in 1:p){ lines(density(depth.mat[,i]), col="red", lwd=2)}
# for(i in active.ind){ lines(density(depth.mat[,i]), col="blue", lwd=2)}
lines(density(depth.full), lwd=2)
legend("topright", c("Non-zero indices","Zero indices","Full model"), col=c("blue","red","black"), lty=1, lwd=2)
signal
signal=.1
## Sample analysis
## Adult income data from UCI repository
rm(list=ls())
setwd('d:/Study/My projects/Depth-model selection/Codes')
#source('misc_functions.R')
## Sample analysis
## Adult income data from UCI repository
rm(list=ls())
setwd('d:/Study/My projects/Depth-model-selection/Codes')
#source('misc_functions.R')
library(R.utils)
library(fda.usc)
library(parallel)
library(far)
library(lmm)
install.packages("far")
install.packages("lmm")
my.mvrnorm = function(n, mu, Sigma){
p = length(mu)
# compute square root of covariance matrix
eo=eigen(Sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
# generate random normals from runif by box-muller transform
rnorm.vec = sqrt(-2*log(runif(n*p)))*cos(2*pi*runif(n*p))
# generate sample matrix
sample.matrix = matrix(rep(mu, n), nrow=n, byrow=T) +
matrix(rnorm.vec, nrow=n, ncol=p)%*%sigma.sqrt
return(sample.matrix)
}
set.seed(10052015)
m = 30
ni = 5
n = m*ni
sdn = n^((1:20)/60)
sdn
set.seed(10052015)
m = 30
ni = 5
n = m*ni
sdn = 1:8
subj = rep(1:m, rep(ni,m))
p = 9
sig = 1
nboot = 1e2
n.iter = 1e2
beta = c(0,rep(1,2),rep(0,6))
beta.names = "X1X2"
X = data.frame(cbind(1,matrix(runif(n*(p-1), -2, 2), ncol=p-1)))
X.names = names(X)
X = as.matrix(X)
form = as.formula(paste( 'y ~ 0 + ', paste(X.names, collapse='+'), '+ (X1 + X2 | subj)'))
Z = as.matrix(X[,1:4])
D = matrix(c(9,   4.8, 0.6, 0,
4.8, 4,   1,   0,
0.6, 1,   1,   0,
0,   0,   0,   0),
ncol=4, byrow=T)
form
ecmeml1
?ecmeml
library(far)
library(lmm)
ecmeml1
source('misc_functions.R')
X = data.frame(cbind(1,matrix(runif(n*(p-1), -2, 2), ncol=p-1)))
X.names = names(X)
X = as.matrix(X)
Z = as.matrix(X[,1:4])
D = matrix(c(9,   4.8, 0.6, 0,
4.8, 4,   1,   0,
0.6, 1,   1,   0,
0,   0,   0,   0),
ncol=4, byrow=T)
## Generate samples
y = rep(0,n)
for(im in 1:m){
iind = ((im-1)*ni+1):(im*ni)
Zi = Z[iind,]
Vi = diag(ni) + Zi %*% D %*% t(Zi)
y[iind] = my.mvrnorm(1, X[iind,] %*% beta, Vi)
}
y = y - mean(y)
# full model
lmmfull = ecmeml1(y=y, subj=subj, pred=X, xcol=1:p, zcol=1:pZ)
pZ = 2
lmmfull = ecmeml1(y=y, subj=subj, pred=X, xcol=1:p, zcol=1:pZ)
y = rep(0,n)
for(im in 1:m){
iind = ((im-1)*ni+1):(im*ni)
Zi = Z[iind,]
Vi = diag(ni) + Zi %*% D %*% t(Zi)
y[iind] = my.mvrnorm(1, X[iind,] %*% beta, Vi)
}
y = y - mean(y)
# full model
lmmfull = ecmeml1(y=y, subj=subj, pred=X, xcol=1:p, zcol=1:pZ)
W = matrix(0, nrow=n, ncol=n)
for(im in 1:m){
iind = ((im-1)*ni+1):(im*ni)
Zi = Z[iind,]
W[iind,iind] = with(lmmfull, solve(sigma2 * diag(ni) + Zi %*% psi %*% t(Zi)))
}
beta.hat = lmmfull$beta
H = lmmfull$cov.beta %*% t(X) %*% W
r = y - X %*% beta.hat; r = r - mean(r)
iind
ni
dim(Z)
dim(X)
Zi = Z[iind,]
psi
lmmfull$psi
?rgamma
load("D:/Study/My projects/Depth-model-selection/Codes/lmmout600marginal.rda")
out600c
View(out600c)
load("D:/Study/My projects/Depth-model-selection/Codes/lmmout150marginalgamma.rda")
View(out150c)
load("D:/Study/My projects/Depth-model-selection/Codes/lmmout600marginalgamma.rda")
View(out600c)
load("D:/Study/My projects/New folder/Codes/lmOutMarginalMooN.rda")
ls()
lmOutMarginalMooN
length(lmOutMarginalMooN
)
View(lmOutMarginalMooN
[[1]])
View(lmOutMarginalMooN[[1]])
